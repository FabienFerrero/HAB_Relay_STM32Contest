[{"id":"8a38ba83.25a6a8","type":"function","z":"38496271.464bde","name":"Distance_with_relay","func":"\n//node.warn(msg.payload);\n\n\nvar gatewaysarray = msg.metadata.gateways;\nvar lat1;\nvar lon1;\nvar max_dist = 0;\n\n\nif (typeof msg.payload.gps_1 != \"undefined\") { // if pkt from node\n\n if (typeof gatewaysarray[0].latitude != \"undefined\") { // Only packt relayed have not a GPS information for the GW, this condition filter the direct connection between node and TTN GW \n   \n   \n    lat1 = parseFloat(msg.payload.gps_1.latitude);    \n    lon1 = parseFloat(msg.payload.gps_1.longitude);\n    context.set('sav_lat1',lat1);\n    context.set('sav_lon1',lon1);\n    return\n } \n else{return}\n}\nelse{\nlat1=context.get('sav_lat1') ;\nlon1=context.get('sav_lon1') ;\ngatewaysarray = msg.metadata.gateways;\n\n}\n\n\n//var gatewaysarray = msg.metadata.gateways;\n\n\n\nvar logMsgs = [];\nfor (i = 0; i < gatewaysarray.length; i++){\n\n// start and end are objects with latitude and longitude\n//decimals (default 2) is number of decimals in the output\n//return is distance in kilometers. \n    var decimals = 2;\n    var earthRadius = 6371; // km\n   // var lat1 = parseFloat(msg.payload.gps_1.latitude);\n    var lat2 = parseFloat(gatewaysarray[i].latitude);\n   // var lon1 = parseFloat(msg.payload.gps_1.longitude);\n    var lon2 = parseFloat(gatewaysarray[i].longitude);\n\n    //var dLat = (lat2 - lat1).toRad();\n    //var dLon = (lon2 - lon1).toRad();\n    //lat1 = lat1.toRad();\n    //lat2 = lat2.toRad();\n    var dLat = (lat2 - lat1)* Math.PI / 180;\n    var dLon = (lon2 - lon1)* Math.PI / 180;\n    lat1_pi = lat1* Math.PI / 180;\n    lat2_pi = lat2* Math.PI / 180;\n    \n    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n            Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1_pi) * Math.cos(lat2_pi);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    var d = earthRadius * c;\n    var dist =  Math.round(d * Math.pow(10, decimals)) / Math.pow(10, decimals);\n    //dist = dist.toString();\n    logMsgs.push(dist);\n    if(dist > max_dist){\n       max_dist=dist; \n        }\n    }\n    \n    context.set('sav_gw',gatewaysarray); // to store a variable\n    context.set('sav_lat1',lat1);\n    context.set('sav_lon1',lon1);\n    \n\n\nreturn {\n    payload: {\n        all_dist: logMsgs,\n        max_dist: max_dist,\n        }};\n        \n        \n","outputs":1,"noerr":0,"x":325,"y":1053,"wires":[["cddbc167.3fbae"]]}]